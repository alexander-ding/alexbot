{"version":3,"sources":["Profile Pic.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","API_URL","autoChat","props","react_default","a","createElement","className","Button_default","variant","size","onClick","handleAutoChat","index_esm","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isAutoChat","handleNewUserMessage","bind","assertThisInitialized","fetch","then","console","log","document","getElementsByClassName","click","addResponseMessage","addLinkSnippet","title","link","renderCustomComponent","alexChat","text","method","headers","Accept","Content-Type","body","JSON","stringify","msg","response","json","data","setTimeout","otherChat","addUserMessage","setState","userMsg","stopAutoChat","lib","subtitle","profileAvatar","logo","showCloseButton","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f6decf06.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Profile Pic.e2465325.jpg\";","import { Widget, addResponseMessage, addUserMessage, addLinkSnippet, renderCustomComponent} from 'react-chat-widget';\nimport 'react-chat-widget/lib/styles.css';\nimport React from 'react';\nimport logo from \"./Profile Pic.jpg\";\nimport {MdPlayArrow} from \"react-icons/md\";\nimport Button from 'react-bootstrap/Button';\n\n\nimport './App.css';\n\n\nconst API_URL = \"https://alex-bot-api.herokuapp.com/\";\n\nfunction autoChat(props) {\n  return <div className=\"rcw-response\">\n    <div className=\"rcw-message-text\">\n      <p>Oh, yes, you can also watch two bots (someone else and me) talk to each other</p>\n      <p><Button variant=\"outline-dark\" size=\"sm\" onClick={()=>{\n        props.handleAutoChat();\n      }}>Try it Now<MdPlayArrow/></Button><br></br><small>(or type \"AUTOCHAT\")</small>\n      </p>\n      \n    </div>  \n  </div>\n}\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    \n    this.state = {\n      isAutoChat: false,\n    };\n    \n    this.handleNewUserMessage = this.handleNewUserMessage.bind(this);\n    this.handleAutoChat = this.handleAutoChat.bind(this);\n  }\n  \n  componentDidMount() {\n    fetch(API_URL).then(function() {\n      console.log(\"Initialized\");\n    });\n\n    // start in full screen\n    const button = document.getElementsByClassName(\"rcw-launcher\")[0];\n    button.click();\n    \n    // credit\n    addResponseMessage(\"Hi! I'm Alex Bot, a chat bot made to imitate the way my maker talks in real chat.\\n\\nYou can start chatting with me here, and feel free to check out my source code!\")\n    addLinkSnippet({\n      title: 'My source code',\n      link: 'https://github.com/alexding123/alexbot',\n    });\n    renderCustomComponent(autoChat, {handleAutoChat:this.handleAutoChat}, true);\n  }\n\n  handleAutoChat() {\n    if (this.state.isAutoChat) {\n      return;\n    }\n    addResponseMessage(\"```The following is AutoChat```\\n```Send \\\"STOP\\\" to stop this at any time```\");\n    function alexChat(text) {\n      if (!this.state.isAutoChat) {\n        return;\n      }\n      fetch(API_URL+\"ChatAlex\", {\n        method: \"POST\",\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({msg: text})\n      }).then(function(response) {\n        return response.json();\n      }).then(function(data) {\n        addResponseMessage(\"```\"+data.data+\"```\");\n        setTimeout(() => otherChat(data.data),\n        1000);\n      });\n    }\n\n    function otherChat(text) {\n      if (!this.state.isAutoChat) {\n        return;\n      }\n      fetch(API_URL+\"ChatOther\", {\n        method: \"POST\",\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({msg: text})\n      }).then(function(response) {\n        return response.json();\n      }).then(function(data) {\n        addUserMessage(\"```\"+data.data+\"```\");\n        setTimeout(() => alexChat(data.data),\n        1000);\n        \n      });\n    }\n    // eslint-disable-next-line\n    alexChat = alexChat.bind(this);\n    // eslint-disable-next-line\n    otherChat = otherChat.bind(this);\n\n    this.setState({\n      isAutoChat: true,\n    }, \n    () => alexChat('hi'));\n  }\n\n  stopAutoChat() {\n    this.setState({\n      isAutoChat: false,\n    });\n\n    addResponseMessage(\"```STOP signal received```\\n```AutoChat terminated```\")\n  }\n\n  handleNewUserMessage(userMsg) {\n    if (userMsg === \"STOP\" && this.state.isAutoChat) {\n      this.stopAutoChat();\n      return;\n    } else if (userMsg === \"AUTOCHAT\" && !this.state.isAutoChat) {\n      this.handleAutoChat();\n      return;\n    }\n    fetch(API_URL+\"ChatAlex\", {\n      method: \"POST\",\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({msg: userMsg})\n    }).then(function(response) {\n      return response.json();\n    }).then(function(data) {\n      addResponseMessage(data.data);\n    });\n  }\n\n \n  render() {\n    return (<div className=\"app\">\n       <Widget\n        title=\"Alex Bot\"\n        subtitle=\"Having a nice day coding\"\n        handleNewUserMessage={this.handleNewUserMessage}\n        profileAvatar={logo}\n        showCloseButton={false}\n      />\n    </div>)\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}