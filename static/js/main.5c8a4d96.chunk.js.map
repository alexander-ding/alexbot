{"version":3,"sources":["Chat.js","App.js","serviceWorker.js","index.js"],"names":["Chat","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","messageList","fetch","then","console","log","_sendMessage","message","setState","concat","toConsumableArray","method","headers","Accept","Content-Type","body","JSON","stringify","msg","data","text","response","json","fileList","author","type","react_default","a","createElement","es","agentProfile","teamName","imageUrl","onMessageWasSent","_onMessageWasSent","bind","onFilesSelected","_onFilesSelected","showEmoji","isOpen","React","Component","App","className","href","Chat_Chat","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qRAGqBA,cACjB,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXC,YAAa,IAHHR,mFAQZS,MAAM,uCAAuCC,KAAK,WAChDC,QAAQC,IAAI,2DAGEC,GAChB,OAAO,SAASC,GACdX,KAAKY,SAAS,CACZP,YAAW,GAAAQ,OAAAf,OAAAgB,EAAA,EAAAhB,CAAME,KAAKI,MAAMC,aAAjB,CAA8BM,MAE3CL,MAAM,0CAA2C,CAC/CS,OAAQ,OACRC,QAAS,CACPC,OAAU,mBACVC,eAAgB,oBAElBC,KAAMC,KAAKC,UAAU,CAACC,IAAKX,EAAQY,KAAKC,SACvCjB,KAAK,SAASkB,GACf,OAAOA,EAASC,SACfnB,KAAK,SAASgB,GACfb,EAAaa,EAAKA,kDAKPI,GACf3B,KAAKU,aAAa,mEAEPc,GACXxB,KAAKY,SAAS,CACZP,YAAW,GAAAQ,OAAAf,OAAAgB,EAAA,EAAAhB,CAAME,KAAKI,MAAMC,aAAjB,CAA8B,CACvCuB,OAAQ,OACRC,KAAM,OACNN,KAAM,CAAEC,8CAMZ,OAAQM,EAAAC,EAAAC,cAAA,WACNF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,aAAc,CACZC,SAAU,aACVC,SAAU,mCAEZC,iBAAkBrC,KAAKsC,kBAAkBtC,KAAKU,aAAa6B,KAAKvC,OAAOuC,KAAKvC,MAC5EwC,gBAAiBxC,KAAKyC,iBAAiBF,KAAKvC,MAC5CK,YAAaL,KAAKI,MAAMC,YACxBqC,WAAW,EACXC,QAAM,YAzDkBC,IAAMC,WCUzBC,MATf,WACE,OACEhB,EAAAC,EAAAC,cAAA,OAAKe,UAAU,OAAf,gBACejB,EAAAC,EAAAC,cAAA,KAAGgB,KAAK,0CAAR,UACblB,EAAAC,EAAAC,cAACiB,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvD,KAAK,SAAAwD,GACjCA,EAAaC","file":"static/js/main.5c8a4d96.chunk.js","sourcesContent":["import {Launcher} from 'react-chat-window';\r\nimport React from 'react';\r\n\r\nexport default class Chat extends React.Component {\r\n    constructor() {\r\n      super();\r\n      this.state = {\r\n        messageList: []\r\n      };\r\n    }\r\n    \r\n    componentDidMount() {\r\n      fetch(\"https://alex-bot-api.herokuapp.com/\").then(function() {\r\n        console.log(\"Initialized\");\r\n      });\r\n    }\r\n    _onMessageWasSent(_sendMessage) {\r\n      return function(message) {\r\n        this.setState({\r\n          messageList: [...this.state.messageList, message]\r\n        });\r\n        fetch(\"https://alex-bot-api.herokuapp.com/Chat\", {\r\n          method: \"POST\",\r\n          headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({msg: message.data.text})\r\n        }).then(function(response) {\r\n          return response.json();\r\n        }).then(function(data) {\r\n          _sendMessage(data.data);\r\n        });\r\n      }\r\n    };\r\n    \r\n    _onFilesSelected(fileList) {\r\n      this._sendMessage(\"Sorry! I don't take files.\");\r\n    }\r\n    _sendMessage(text) {\r\n      this.setState({\r\n        messageList: [...this.state.messageList, {\r\n          author: 'them',\r\n          type: 'text',\r\n          data: { text }\r\n        }]\r\n      })\r\n    }\r\n   \r\n    render() {\r\n      return (<div>\r\n        <Launcher\r\n          agentProfile={{\r\n            teamName: 'Alex (Bot)',\r\n            imageUrl: 'https://i.imgur.com/OoTr0Jm.jpg'\r\n          }}\r\n          onMessageWasSent={this._onMessageWasSent(this._sendMessage.bind(this)).bind(this)}\r\n          onFilesSelected={this._onFilesSelected.bind(this)}\r\n          messageList={this.state.messageList}\r\n          showEmoji={false}\r\n          isOpen\r\n        />\r\n      </div>)\r\n    }\r\n  }","import React from 'react';\nimport './App.css';\nimport Chat from \"./Chat.js\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      Checkout the <a href=\"https://github.com/alexding123/alexbot\">Source</a>\n      <Chat/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}